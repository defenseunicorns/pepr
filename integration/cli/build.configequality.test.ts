// SPDX-License-Identifier: Apache-2.0
// SPDX-FileCopyrightText: 2023-Present The Pepr Authors

import { beforeAll, describe, expect, it } from "@jest/globals";
import * as path from "node:path";
import * as fs from "node:fs/promises";
import { Workdir } from "../helpers/workdir";
import * as time from "../helpers/time";
import * as pepr from "../helpers/pepr";
// import { ModuleConfig } from "../../src/lib/core/module"

const FILE = path.basename(__filename);
const HERE = __dirname;

describe("build", () => {
  const workdir = new Workdir(`${FILE}`, `${HERE}/../testroot/cli`);

  beforeAll(async () => {
    await workdir.recreate();
  });

  describe("builds a module", () => {
    const id = FILE.split(".").at(1);
    const testModule = `${workdir.path()}/${id}`;

    beforeAll(async () => {
      await fs.rm(testModule, { recursive: true, force: true });
      const argz = [
        `--name ${id}`,
        `--description ${id}`,
        `--errorBehavior reject`,
        "--confirm",
        "--skip-post-init",
      ].join(" ");
      await pepr.cli(workdir.path(), { cmd: `pepr init ${argz}` });
      await pepr.tgzifyModule(testModule);
      await pepr.cli(testModule, { cmd: `npm install` });
    }, time.toMs("2m"));

    describe("using every config option in package.json", () => {
      beforeAll(async () => {
        const build = await pepr.cli(testModule, { cmd: `pepr build` });
        expect(build.exitcode).toBe(0);
        expect(build.stderr.join("").trim()).toBe("");
        expect(build.stdout.join("").trim()).toContain("K8s resource for the module saved");
      }, time.toMs("1m"));

      it("configures both raw manifest and helm chart appropriately", async () => {
        // /** Global configuration for the Pepr runtime. */
        // export type ModuleConfig = {
        //   /** The Pepr version this module uses */
        //   peprVersion?: string;
        //   /** The user-defined version of the module */
        //   appVersion?: string;
        //   /** A unique identifier for this Pepr module. This is automatically generated by Pepr. */
        //   uuid: string;
        //   /** A description of the Pepr module and what it does. */
        //   description?: string;
        //   /** The webhookTimeout */
        //   webhookTimeout?: number;
        //   /** Reject K8s resource AdmissionRequests on error. */
        //   onError?: string;
        //   /** Configure global exclusions that will never be processed by Pepr. */
        //   alwaysIgnore: WebhookIgnore;
        //   /** Define the log level for the in-cluster controllers */
        //   logLevel?: string;
        //   /** Propagate env variables to in-cluster controllers */
        //   env?: Record<string, string>;
        //   /** Custom Labels for Kubernetes Objects */
        //   customLabels?: CustomLabels;
        //   /** Custom RBAC rules */
        //   rbac?: PolicyRule[];
        //   /** The RBAC mode; if "scoped", generates scoped rules, otherwise uses wildcard rules. */
        //   rbacMode?: string;
        // };
        // TODO: can we (somehow) introspect the type to know which / how many props to match?
      });
    });
  });
});
