name: Version Release

on:
  push:
    branches: ["main"]
    paths-ignore:
    - "**.md"
    - "LICENSE"
    - "CODEOWNERS"



permissions:
  contents: read

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write 
      packages: write

    outputs:
      pepr_version: ${{ steps.capture.outputs.pepr_version }}

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
      - uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Use Node.js 20
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 # v6.0.0
        with:
          node-version: 20
          registry-url: "https://registry.npmjs.org"
          cache: "npm"

      - name: Rapidfort Login
        uses: nick-fields/retry@ce71cc2ab81d554ebbe88c79ab5975992d79ba08 # v3.0.2
        with:
          max_attempts: 5
          retry_on: error
          timeout_minutes: 1
          command: |
            echo "${{ secrets.RAPIDFORT_PASSWORD }}" | docker login quay.io --username "${{ secrets.RAPIDFORT_USERNAME }}" --password-stdin

      - name: UDS Registry Login
        run: echo "${{ secrets.UDS_REGISTRY_PASSWORD }}" | docker login -u "${{ secrets.UDS_REGISTRY_USERNAME }}" --password-stdin registry.defenseunicorns.com
        shell: bash

      - name: "Pepr Controller: Login to GHCR"
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ghcr.io
          username: dummy
          password: ${{ github.token }}

      - name: Set up Node registry authentication
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 # v6.0.0
        with:
          node-version: 24
          registry-url: "https://registry.npmjs.org"

      - name: Publish GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npx semantic-release \
          --analyze-commits @semantic-release/commit-analyzer \
          --generate-notes @semantic-release/release-notes-generator \
          --prepare @semantic-release/npm \
          --publish @semantic-release/github

      - name: Capture Pepr version
        id: capture
        run: |
          V=$(jq -r .version package.json)
          echo "pepr_version=$V" >> "$GITHUB_OUTPUT"
          echo "PEPR_VERSION=$V" >> "$GITHUB_ENV"
          echo "Detected version: $V"

      - name: Publish to GHCR 
        if: ${{ env.PEPR_VERSION != '0.0.0-development' }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: ./.github/workflows/scripts/release.sh "${PEPR_VERSION}" 

  slsa: # This is where the slsa tarball is built for publish-package step
    if: ${{ needs.build-and-release.outputs.pepr_version != '0.0.0-development' }}
    permissions:
      id-token: write
      actions: read
      contents: read
    needs: [build-and-release]
    uses: slsa-framework/slsa-github-generator/.github/workflows/builder_nodejs_slsa3.yml@v2.1.0
    with:
      run-scripts: "set-version, ci, build"
    secrets: inherit

  publish:
    if: ${{ needs.build-and-release.outputs.pepr_version != '0.0.0-development' }}
    needs: [slsa, build-and-release]
    runs-on: ubuntu-latest
    env:
      PEPR_VERSION: ${{ needs.build-and-release.outputs.pepr_version }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Set up Node registry authentication
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 # v6.0.0
        with:
          node-version: 20
          registry-url: "https://registry.npmjs.org"

      - name: Set Version
        run: |
          node ./scripts/set-version.js "$PEPR_VERSION"
          npm install
          npm run build

      - name: Publish package
        id: publish
        uses: slsa-framework/slsa-github-generator/actions/nodejs/publish@9103ac683d00ceecdb1c21507a9c7a9983ef46f4 # v2.0.0
        with:
          access: public
          node-auth-token: ${{ secrets.NPM_TOKEN }}
          package-name: ${{ needs.slsa.outputs.package-name }}
          package-download-name: ${{ needs.slsa.outputs.package-download-name }}
          package-download-sha256: ${{ needs.slsa.outputs.package-download-sha256 }}
          provenance-name: ${{ needs.slsa.outputs.provenance-name }}
          provenance-download-name: ${{ needs.slsa.outputs.provenance-download-name }}
          provenance-download-sha256: ${{ needs.slsa.outputs.provenance-download-sha256 }}

  pack-and-push:
    if: ${{ needs.build-and-release.outputs.pepr_version != '0.0.0-development' }}
    needs: [publish, build-and-release]
    runs-on: ubuntu-latest
    env:
      PEPR_VERSION: ${{ needs.build-and-release.outputs.pepr_version }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Use Node.js 24
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 # v6.0.0
        with:
          node-version: 24
          registry-url: "https://registry.npmjs.org"
          cache: "npm"

      - name: Download ORAS
        run: |
          VERSION="1.2.2"
          curl -LO "https://github.com/oras-project/oras/releases/download/v${VERSION}/oras_${VERSION}_linux_amd64.tar.gz"
          mkdir -p oras-install/
          tar -zxf oras_${VERSION}_*.tar.gz -C oras-install/
          sudo mv oras-install/oras /usr/local/bin/
          rm -rf oras_${VERSION}_*.tar.gz oras-install/

      - name: Docker login to UDS registry
        run: echo "${{ secrets.UDS_REGISTRY_PASSWORD }}" | docker login -u "${{ secrets.UDS_REGISTRY_USERNAME }}" --password-stdin registry.defenseunicorns.com

      - name: Push package to UDS OCI registry
        run: |
          npm install --global npm
          node ./scripts/set-version.js "$PEPR_VERSION"
          npm install
          npm run build
          oras push registry.defenseunicorns.com/pepr-dev/npm/pepr:v${PEPR_VERSION} \
            --artifact-type application/vnd.pepr.module.layer.v1 pepr-${PEPR_VERSION}.tgz
