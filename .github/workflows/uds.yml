name: UDS - Smoke Test

permissions: read-all
on:
  workflow_dispatch:

jobs:
  pepr-build:
    name: controller image
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@91182cccc01eb5e619899d80e4e971d6181294a7 # v2.10.1
        with:
          egress-policy: audit

      - name: clone pepr
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          repository: defenseunicorns/pepr
          path: pepr

      - name: "set env: PEPR"
        run: echo "PEPR=${GITHUB_WORKSPACE}/pepr" >> "$GITHUB_ENV"

      - name: setup node
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: pepr

      - name: install pepr deps
        run: |
          cd "$PEPR"
          npm ci

      - name: build & tgz pepr module
        run: |
          npm run build
          pkg=$(npm pack)
          mv "$pkg" "pepr-pkg.tgz"

      - name: upload package tgz artifact
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: pepr-pkg.tgz
          path: pepr-pkg.tgz
          retention-days: 1

      - name: build pepr image
        run: |
          cd "$PEPR"
          npm run build:image

      - name: tar pepr image
        run: |
          PEPR_TAR="${GITHUB_WORKSPACE}/pepr-img.tar"
          echo "PEPR_TAR=${PEPR_TAR}" >> "$GITHUB_ENV"
          docker image save --output "$PEPR_TAR" pepr:dev

      - name: upload image tar artifact
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: pepr-img.tar
          path: pepr-img.tar
          retention-days: 1

  # uds-run:
  #   name: uds run slim-dev
  #   runs-on: ubuntu-latest
  #   needs:
  #     - pepr-build
  #   steps:
  #     - name: Harden Runner
  #       uses: step-security/harden-runner@91182cccc01eb5e619899d80e4e971d6181294a7 # v2.10.1
  #       with:
  #         egress-policy: audit

  #     - name: "install k3d"
  #       run: "curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash"
  #       shell: bash

  #     - name: dowload image tar artifact
  #       uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
  #       with:
  #         name: pepr-img.tar
  #         path: ${{ github.workspace }}

  #     - name: import pepr image from tar
  #       run: |
  #         PEPR_TAR="${GITHUB_WORKSPACE}/pepr-img.tar"
  #         echo "PEPR_TAR=${PEPR_TAR}" >> "$GITHUB_ENV"
  #         docker image load --input "$PEPR_TAR"

  #     - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
  #       with:
  #         repository: defenseunicorns/pepr-excellent-examples
  #         path: pepr-excellent-examples

  #     - name: setup node
  #       uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
  #       with:
  #         node-version: 20
  #         cache: "npm"
  #         cache-dependency-path: pepr-excellent-examples

  #     - name: install uds cli
  #       run: |
  #         echo "TODO"


# install UDS cli
# checkout uds-core
# swap in-question version of pepr into uds-core package.json
# - how though?  will using file:*.tar.gz packages work?
#   - in that case pepr-build will need to build & upload the tar.gz as an arti too
#   - will need a pipeline input to allow setting which branch of pepr to pull / build too
# run uds run slim-dev using the PEPR_CUSTOM_IMAGE="pepr:dev" env var