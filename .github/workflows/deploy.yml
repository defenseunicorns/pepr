name: Deploy Test

permissions: read-all
on:
  workflow_dispatch:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  deploy:
    name: deploy test (${{ matrix.deployer }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        deployer: [helm, zarf]
    env:
      MOD_NAME: pepr-test-${{ matrix.deployer }}
      PEPR: ${{ github.workspace }}/pepr
      CLUSTER: pepr-test-${{ matrix.deployer }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Set up Kubernetes
        uses: azure/setup-kubectl@776406bce94f63e41d621b960d78ee25c8b76ede # v4.0.1
        with:
          version: 'latest'

      - name: Install k3d
        run: "curl -s --retry 5 --retry-all-errors --fail https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash"
        shell: bash

      - name: Install The Latest Release Version of Zarf
        if: matrix.deployer == 'zarf'
        uses: zarf-dev/setup-zarf@10e539efed02f75ec39eb8823e22a5c795f492ae #v1.0.1
        with:
          download-init-package: true

      - name: Clone Pepr
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          repository: defenseunicorns/pepr
          path: pepr

      - name: Setup Node
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 # v6.0.0
        with:
          node-version: 22
          cache: "npm"
          cache-dependency-path: pepr

      - name: Install Pepr Dependencies
        working-directory: ${{ env.PEPR }}
        run: npm ci

      - name: Build Pepr Package and Image
        working-directory: ${{ env.PEPR }}
        run: npm run build:image

      - name: Set Dynamic Environment Variables
        run: |
          echo "MOD_PATH=${PEPR}/$MOD_NAME" >> "$GITHUB_ENV"

      - name: Initialize Pepr Module
        working-directory: ${{ env.PEPR }}
        run: |
          npx --yes pepr-0.0.0-development.tgz init \
            --name "$MOD_NAME" \
            --description "$MOD_NAME" \
            --error-behavior "ignore" \
            --uuid "$MOD_NAME" \
            --skip-post-init \
            --yes
          sed -i 's/uuid": ".*",/uuid": "'"$MOD_NAME"'",/g' "$MOD_PATH/package.json"

      - name: Build Pepr Module
        working-directory: ${{ env.MOD_PATH }}
        run: |
          npm install "${PEPR}/pepr-0.0.0-development.tgz"
          npx pepr build --custom-image pepr:dev

      - name: Prepare Test Cluster
        run: |
          k3d cluster create "$CLUSTER"
          k3d image import pepr:dev --cluster "$CLUSTER"

      - name: Set Kubeconfig
        run: echo "KUBECONFIG=$(k3d kubeconfig write "$CLUSTER")" >> "$GITHUB_ENV"

      - name: Deploy Pepr Module (Helm)
        if: matrix.deployer == 'helm'
        working-directory: ${{ env.MOD_PATH }}
        run: helm install "$MOD_NAME" "./dist/$MOD_NAME-chart" --kubeconfig "$KUBECONFIG"

      - name: Initialize Zarf
        if: matrix.deployer == 'zarf'
        working-directory: ${{ env.MOD_PATH }}
        run: zarf init --confirm

      - name: Package Pepr Module (Zarf)
        if: matrix.deployer == 'zarf'
        working-directory: ${{ env.MOD_PATH }}
        run: zarf package create --confirm "dist/"

      - name: Deploy Pepr Module (Zarf)
        if: matrix.deployer == 'zarf'
        working-directory: ${{ env.MOD_PATH }}
        run: zarf package deploy --confirm zarf-package-pepr-$MOD_NAME-amd64-0.0.1.tar.zst

      - name: Check Deployment Readiness
        timeout-minutes: 5
        run: $GITHUB_WORKSPACE/pepr/.github/workflows/scripts/check-deployment-readiness.sh pepr-$MOD_NAME
